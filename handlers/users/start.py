from aiogram import types
from loader import dp
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from states import data
from keyboard import markup_start, markup_place
import utils.db_api.quick_commands_request as commands
import traceback
#Handler for /start
@dp.message_handler(text = '/start')
async def command_start(message = types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è!\n"+
                         "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:\n"+
                         "-—É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –∫–ª—É–±–µ‚úâ\n"+
                         "-–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∂–µ–ª–µ–∑–æüìÜ", reply_markup=markup_start )
#Start to process reserve
@dp.callback_query_handler(text = 'reserve')
async def reserve(call: types.CallbackQuery):
    try:
        await commands.select_request(call.message.from_user.id)
        await call.message.edit_text("–¢—ã —É–∂–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É. –î–æ–∂–¥–∏—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")
    except Exception as exc:

        await call.message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞–ª: ")
        await call.message.edit_reply_markup(reply_markup=markup_place)
        await data.place.set() #place.py